#!/usr/bin/env python3
# -*- encoding: utf-8; py-indent-offset: 4 -*-

# Copyright (C) 2024  Christopher Pommer <cp.software@outlook.de>

# This program is free software; you can redistribute it and/or
# modify it under the terms of the GNU General Public License
# as published by the Free Software Foundation; either version 2
# of the License, or (at your option) any later version.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.

# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301, USA.


import sys
import argparse
import json
from pathlib import Path

import requests

import cmk.utils.password_store


def map_app_type(app_type):

    type_map = {
        "#microsoft.graph.androidForWorkApp": "Android for work",
        "#microsoft.graph.androidManagedStoreApp": "Android managed store",
        "#microsoft.graph.androidManagedStoreWebApp": "Android managed store web",
        "#microsoft.graph.iosVppApp": "iOS VPP",
        "#microsoft.graph.macOsVppApp": "macOS VPP",
        "#microsoft.graph.microsoftStoreForBusinessApp": "MS Store for business",
    }

    app_type_short = type_map.get(app_type, app_type.replace("#microsoft.graph.", ""))

    return app_type_short


def parse_arguments():
    parser = argparse.ArgumentParser()
    parser.add_argument(
        "--tenant-id",
        dest="tenant_id",
        required=True,
        help="The unique ID from the Microsoft Entra tenant.",
    )
    parser.add_argument(
        "--app-id",
        dest="app_id",
        required=True,
        help="The ID of the Micrsoft Entra app registration for Microsoft Graph API requests.",
    )
    parser.add_argument(
        "--app-secret",
        dest="app_secret",
        required=True,
        help="The client secret from the Microsoft Entra app registration.",
    )
    parser.add_argument(
        "--services-to-monitor",
        dest="services_to_monitor",
        required=False,
        help="Microsoft Intune services that you want to monitor.",
    )

    return parser.parse_args()


def get_access_token(tenant_id, app_id, app_secret, resource_scope):
    token_url = "https://login.microsoftonline.com/" + tenant_id + "/oauth2/v2.0/token"

    headers = {"Content-Type": "application/x-www-form-urlencoded"}

    body = {
        "client_id": app_id,
        "client_secret": app_secret,
        "grant_type": "client_credentials",
        "scope": resource_scope,
    }

    try:
        api_response = requests.post(token_url, headers=headers, data=body)
        api_response.raise_for_status()
    except requests.exceptions.RequestException as err:
        sys.stderr.write("CRITICAL | Failed to get access token\n")
        sys.stderr.write(f"Error: {err}\n")
        sys.exit(1)

    api_response_json = api_response.json()
    access_token = api_response_json["access_token"]

    return access_token


def get_intune_apple_mdm_push_cert(token):
    intune_cert_url = "https://graph.microsoft.com/v1.0/deviceManagement/applePushNotificationCertificate"

    headers = {"Accept": "application/json", "Authorization": "Bearer " + token}

    try:
        intune_cert_response = requests.get(intune_cert_url, headers=headers)
        intune_cert_response.raise_for_status()
    except requests.exceptions.RequestException as err:
        # if no certificate configured, then the request responds with 404
        if intune_cert_response.status_code == 404:
            return
        sys.stderr.write("CRITICAL | Failed to get certificate\n")
        sys.stderr.write(f"Error: {err}\n")
        sys.exit(2)

    intune_cert_json = intune_cert_response.json()

    intune_cert = {
        "cert_appleid": intune_cert_json.get("appleIdentifier"),
        "cert_expiration": intune_cert_json.get("expirationDateTime"),
    }

    return intune_cert


def get_intune_cert_connectors(token):
    intune_cert_connectors_url = "https://graph.microsoft.com/beta/deviceManagement/ndesConnectors"

    headers = {"Accept": "application/json", "Authorization": "Bearer " + token}

    try:
        intune_cert_connectors_response = requests.get(intune_cert_connectors_url, headers=headers)
        intune_cert_connectors_response.raise_for_status()
    except requests.exceptions.RequestException as err:
        sys.stderr.write("CRITICAL | Failed to get certificate connectors\n")
        sys.stderr.write(f"Error: {err}\n")
        sys.exit(2)

    intune_cert_connectors = intune_cert_connectors_response.json().get("value", [])

    connectors_list = []
    for connector in intune_cert_connectors:
        connectors_dict = {
            "connector_connection_last": connector["lastConnectionDateTime"],
            "connector_state": connector["state"],
            "connector_name": connector["displayName"],
            "connector_version": connector["connectorVersion"],
        }

        connectors_list.append(connectors_dict)

    return connectors_list


def get_intune_vpp_tokens(token):
    intune_vpp_tokens_url = "https://graph.microsoft.com/v1.0/deviceAppManagement/vppTokens"

    headers = {"Accept": "application/json", "Authorization": "Bearer " + token}

    try:
        intune_vpp_tokens_response = requests.get(intune_vpp_tokens_url, headers=headers)
        intune_vpp_tokens_response.raise_for_status()
    except requests.exceptions.RequestException as err:
        sys.stderr.write("CRITICAL | Failed to get vpp tokens\n")
        sys.stderr.write(f"Error: {err}\n")
        sys.exit(2)

    intune_vpp_tokens = intune_vpp_tokens_response.json().get("value", [])

    vpp_token_list = []
    for vpp_token in intune_vpp_tokens:
        vpp_token_dict = {
            "token_id": vpp_token["id"],
            "token_appleid": vpp_token["appleId"],
            "token_state": vpp_token["state"],
            "token_expiration": vpp_token["expirationDateTime"],
        }

        vpp_token_list.append(vpp_token_dict)

    return vpp_token_list


def get_intune_app_licenses(token):
    intune_apps_url = (
        "https://graph.microsoft.com/beta/deviceAppManagement/mobileApps?$filter=publishingState eq 'published'"
    )

    headers = {"Accept": "application/json", "Authorization": "Bearer " + token}

    intune_apps = []

    while True:
        try:
            intune_apps_response = requests.get(intune_apps_url, headers=headers)
            intune_apps_response.raise_for_status()
        except requests.exceptions.RequestException as err:
            print(intune_apps_response.text)
            sys.stderr.write("CRITICAL | Failed to get intune apps\n")
            sys.stderr.write(f"Error: {err}\n")
            sys.exit(2)

        intune_apps_json = intune_apps_response.json()
        intune_apps.extend(intune_apps_json.get("value", []))

        next_link = intune_apps_json.get("@odata.nextLink")
        if next_link:
            intune_apps = next_link
        else:
            break

    intune_app_licenses = [
        app for app in intune_apps if app.get("publishingState") == "published" and app.get("totalLicenseCount")
    ]

    app_list = []
    for app in intune_app_licenses:
        app_dict = {
            "app_type": map_app_type(app["@odata.type"]),
            "app_name": app["displayName"],
            "app_publisher": app.get("publisher"),
            "app_license_total": app["totalLicenseCount"],
            "app_license_consumed": app["usedLicenseCount"],
            "app_assigned": app.get("isAssigned"),
        }

        app_list.append(app_dict)

    return app_list


def main():
    args = parse_arguments()
    tenant_id = args.tenant_id
    app_id = args.app_id
    services_to_monitor = args.services_to_monitor.split(",") if args.services_to_monitor else None

    pw_id, pw_path = args.app_secret.split(":")
    app_secret = cmk.utils.password_store.lookup(Path(pw_path), pw_id)

    resource_scope = "https://graph.microsoft.com/.default"

    token = get_access_token(tenant_id, app_id, app_secret, resource_scope)

    if "apple_mdm_push_cert" in services_to_monitor:
        intune_apple_cert = get_intune_apple_mdm_push_cert(token)
        if intune_apple_cert:
            print("<<<ms_intune_apple_mdm_push_cert:sep(0)>>>")
            print(json.dumps(intune_apple_cert))

    if "cert_connectors" in services_to_monitor:
        intune_cert_connectors = get_intune_cert_connectors(token)
        if intune_cert_connectors:
            print("<<<ms_intune_cert_connectors:sep(0)>>>")
            print(json.dumps(intune_cert_connectors))

    if "vpp_tokens" in services_to_monitor:
        intune_apple_vpp_tokens = get_intune_vpp_tokens(token)
        if intune_apple_vpp_tokens:
            print("<<<ms_intune_apple_vpp_tokens:sep(0)>>>")
            print(json.dumps(intune_apple_vpp_tokens))

    if "app_licenses" in services_to_monitor:
        intune_app_licenses = get_intune_app_licenses(token)
        if intune_app_licenses:
            print("<<<ms_intune_app_licenses:sep(0)>>>")
            print(json.dumps(intune_app_licenses))


if __name__ == "__main__":
    main()
